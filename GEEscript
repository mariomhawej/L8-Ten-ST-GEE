// A UI to interactively filter a collection, select an individual image
// from the results, display it with a variety of visualizations, and export it.
    
    var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-119.4914315532198, 35.6244945376284],
          [-119.4914315532198, 35.485396701596315],
          [-119.25110562548542, 35.485396701596315],
          [-119.25110562548542, 35.6244945376284]]], null, false);
          
// The namespace for our application.  All the state is kept in here.
var app = {};

/** Creates the UI panels. */
app.createPanels = function() {
  /* The introduction section. */
  app.intro = {
    panel: ui.Panel([
          ui.Thumbnail({
            image: ee.Image('users/joyin7/AUB-Logo').visualize({
            bands:  ['b1', 'b2', 'b3'],
            min: 0,
            max: 255
            }),
                style: {height: '65px', width: '101px',margin: '10px 75px', padding :'0'}
            }),
    
        ui.Label({
        value: 'Ten-ST-GEE',
        style: {fontWeight: 'bold', fontSize: '44px', margin: '10px 10px', fontFamily: 'serif'}
      }),
        ui.Label({
        value: ' An Automated 10-m Land Surface Temperature Retrieval System',
        style: {fontWeight: 'bold', fontSize: '17px', margin: '10px 5px', textAlign: 'center', fontFamily: 'serif'}
      }),
        ui.Label({
        value: ' This application allows to assess Land Surface Tempearture (LST) values' +
               ' based on the 10-m Sentinel-2 satellite collection. User has to only include the requested month and year'
               + ' as well as the study area. Ten-ST-GEE will do the rest!',
        style: {fontWeight: '50', fontSize: '11px', margin: '10px 5px', textAlign: 'left', fontFamily: 'serif'}
      }),
    ]),
  };

  /* The Date filter. */
  app.filters = {
    mapCenter: ui.Checkbox({label: 'Filter to map center', value: true,
    style: {fontSize: '12px', fontFamily: 'serif'}}
    ),
    m: ui.Textbox({placeholder:'e.g. 05', value: '05', 
    style: {fontFamily: 'serif'}}),
    year: ui.Textbox({placeholder:'e.g. 2020', value: '2020', 
    style: {fontFamily: 'serif'}}),
    loadingLabel: ui.Label({
      value: 'Loading...',
      style: {stretch: 'vertical', color: 'gray', shown: false, fontFamily: 'serif'}
    })
  };

  
  /* The panel for the filter control widgets. */
  app.filters.panel = ui.Panel({
    widgets: [
      ui.Label('Select Date', {fontWeight: 'bold', fontSize: '20px', fontFamily: 'serif'
      , margin: '20px 0px 20px 0px'}),
      ui.Label('Month', {fontWeight: 'bold', fontFamily: 'serif'}), app.filters.m,
      ui.Label('Year', {fontWeight: 'bold', fontFamily: 'serif'}), app.filters.year,
      app.filters.mapCenter,
    ],
    style: app.SECTION_STYLE
  });
  
  /* The export section. */
  app.export = {
    button: ui.Button({
      label: 'Calculate 10-m LST',
      style: {fontWeight: 'bold', fontFamily: 'serif'},
      // React to the button's click event.
      onClick: function() {
        
  /** Ten-ST_GEE */
    app.setLoadingMode(true);
    
        // Retreive needed value
    var m = app.filters.m.getValue();
    var year = app.filters.year.getValue();
    var any = ee.Number.parse(year);
        any.evaluate(function(ids) {
          // Update the image picker with the given list of ids.
          app.setLoadingMode(false);
        });

//-----------------------------------------------------------------
//-----------------------------------------------------------------

/* Convert to temporal frame */
var start = new Date(year + "-" + m + "-01");
var end = new Date(year + "-" + m + "-28");

var system =  year + ""+ "0" + m;
    
/* Landsat 8 image assessment*/
  function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

var landsat = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
       .filterDate(start, end)
       .map(maskL8sr);

// Calculate median
var median = landsat.median();

var l8m = median.select('B2', 'B3', 'B4', 'B5', 'B10', 'B11', 'pixel_qa')
          .reproject(median.select('B2').projection(), null, 30);

// Calculate NDVI
var ndvi = l8m.normalizedDifference(['B5','B4']);

// Calculate LAI
var LAI_1 = ndvi.multiply(ndvi.multiply(ndvi.multiply(9.519)));
var LAI_2 = ndvi.multiply(ndvi.multiply(0.104));
var LAI_3 = ndvi.multiply (1.236);
var LAI = LAI_1.add(LAI_2).add(LAI_3).subtract(0.257).rename('LAI');

// Calculate LST
// Calculate eNB
var eNB_1 = LAI.multiply(0.0033).add(0.97).rename('eNB');
var eNB = LAI.expression(
      "(b1 > 3 ) ? 0.98" +
      ": b0",
      {
      'b0': eNB_1.select('eNB'),
      'b1': LAI.select('LAI') ,
});

// Calculate LST 10
var LST10_1 = l8m.select('B10');
var LST10 = LST10_1.multiply(eNB).multiply(0.1);

// Calculate LST 11
var LST11_1 = l8m.select('B11');
var LST11 = LST10_1.multiply(eNB).multiply(0.1);

// Calculate LST median
var LSTm = LST10.add(LST11).divide(2)
          .reproject(median.select('B2').projection(), null, 30);

// Define the visualization parameters.
var vizParamsl8 = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

var visParams = {min: 270, max: 310, palette: [
    '040274', '040281', '0502a3', '0502b8', '0502ce', '0502e6',
    '0602ff', '235cb1', '307ef3', '269db1', '30c8e2', '32d3ef',
    '3be285', '3ff38f', '86e26f', '3ae237', 'b5e22e', 'd6e21f',
    'fff705', 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',
    'ff0000', 'de0101', 'c21301', 'a71001', '911003'
  ],};
        
// Map results
Map.centerObject(geometry,12);
Map.addLayer(l8m,vizParamsl8,'Landsat-8 RGB'+ ' Date: '+ year + m);
Map.addLayer(LSTm,visParams,'Landsat-8 LST'+ ' Date: '+ year + m);

// Export a cloud-optimized GeoTIFF.
Export.image.toDrive({
  image: LSTm,
  description: 'L8_LST_' + system,
  scale: 30,
  region: geometry,
  fileFormat: 'GeoTIFF',
  maxPixels: 1e9,
  formatOptions: {
    cloudOptimized: true
  }
});

/* Sentinel-2 image assessment*/
  // Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = ee.Number(2).pow(10).int();
  var cirrusBitMask = ee.Number(2).pow(11).int();

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));

  // Return the masked and scaled data, without the QA bands.
  return image.updateMask(mask).divide(10000)
      .select("B.*")
      .copyProperties(image, ["system:time_start"]);
}

// Map the function over one year of data and take the median.
// Load Sentinel-2 TOA reflectance data.
var collection = ee.ImageCollection('COPERNICUS/S2_SR')
    .filterDate(start, end)
    .filterBounds(geometry)
    // Pre-filter to get less cloudy granules.
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .map(maskS2clouds);

// Calculate median
var median2 = collection.median();
var s2m = median2.select('B2', 'B3', 'B4')
          .reproject(median.select('B2').projection(), null, 10);

// Define the visualization parameters.
var vizParams = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 0.5,
  gamma: [0.95, 1.1, 1]
};
    
// Map results
Map.addLayer(s2m,vizParams,'Sentinel-2 RGB'+ ' Date: '+ year + m);

/* Bandpass adjustment */
  // Create a new images that is the concatenation of two bands from two sensors
var red = ee.Image.cat(s2m.select('B4'),l8m.select('B4'));
var green = ee.Image.cat(s2m.select('B3'),l8m.select('B3'));
var blue = ee.Image.cat(s2m.select('B2'),l8m.select('B2'));

// Calculate regression coefficients for the set of pixels
var linearFitr = red.reduceRegion({
  reducer: ee.Reducer.linearFit(),
  geometry: geometry,
  scale: 30,
});

// Extract the y-intercept and slope.
var b0r = linearFitr.get('offset'); // y-intercept
var b1r = linearFitr.get('scale'); // slope

var new_s2r = s2m.select('B4').multiply(ee.Number(b1r)).add(ee.Number(b0r))
          .reproject(median.select('B2').projection(), null, 10);

//Map.addLayer(new_s2r,{max: 5000, min: 0}, 'Sentinel-2 RGB');

// Calculate regression coefficients for the set of pixels
var linearFitg = green.reduceRegion({
  reducer: ee.Reducer.linearFit(),
  geometry: geometry,
  scale: 30,
});

// Extract the y-intercept and slope.
var b0g = linearFitg.get('offset'); // y-intercept
var b1g = linearFitg.get('scale'); // slope

var new_s2g = s2m.select('B3').multiply(ee.Number(b1g)).add(ee.Number(b0g))
          .reproject(median.select('B2').projection(), null, 10);

// Calculate regression coefficients for the set of pixels
var linearFitb = blue.reduceRegion({
  reducer: ee.Reducer.linearFit(),
  geometry: geometry,
  scale: 30,
});

// Extract the y-intercept and slope.
var b0b = linearFitb.get('offset'); // y-intercept
var b1b = linearFitb.get('scale'); // slope

var new_s2b = s2m.select('B2').multiply(ee.Number(b1b)).add(ee.Number(b0b))
          .reproject(median.select('B2').projection(), null, 10);

/* OLS between L8 RGB and LST values */
  // Aggregation of LST
  var agg_LST = LSTm
    // Force the next reprojection to aggregate instead of resampling.
    .reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 900
    })
    .reproject(median.select('B2').projection(), null, 900);

// Create a new image that is the concatenation of these bands
var imgRegress = ee.Image.cat(l8m.select('B4'), l8m.select('B3'),
                l8m.select('B2'),agg_LST, LSTm);

// Calculate regression coefficients
var linearRegression = imgRegress.reduceRegion({
  reducer: ee.Reducer.robustLinearRegression({
    numX: 4,
    numY: 1
  }),
  geometry: geometry,
  scale: 30,
});

// Convert the coefficients array to a list.
var coefList = ee.Array(linearRegression.get('coefficients')).toList();

// Extract the y-intercept and slope.
var b4 = ee.List(coefList.get(0)).get(0); // y-red
var b3 = ee.List(coefList.get(1)).get(0); // y-green
var b2 = ee.List(coefList.get(2)).get(0); // y-blue
var b1 = ee.List(coefList.get(3)).get(0); // slope

// Extract the residuals.
var residuals = ee.Array(linearRegression.get('residuals')).toList().get(0);

/* Calculate S2-LST */
  var s2_lst = new_s2r.multiply(ee.Number(b4)).add(new_s2g.multiply(ee.Number(b3)))
              .add(new_s2b.multiply(ee.Number(b2))).add(LSTm.multiply(ee.Number(b1)))
              .add(ee.Number(residuals))
              .reproject(median.select('B2').projection(), null, 10);
              
Map.addLayer(s2_lst, visParams, 'Sentinel-2 LST'+ ' Date: '+ year + m);

// Export the image, specifying scale and region.
Export.image.toDrive({
  image: s2_lst,
  description: 'S2_LST_' + system,
  scale: 10,
  maxPixels: 1e9,
  region: geometry
});

/* Accuracy Assessment */
  // Aggregation of S2 LST
  var agg_S2LST = s2_lst
    // Force the next reprojection to aggregate instead of resampling.
    .reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 900
    })
    .reproject(median.select('B2').projection(), null, 30);
    
    // Subtract L8 and S2 values and retreive Mean deviation
    var deviation = s2_lst.subtract(LSTm).divide(LSTm).abs();
    
      var dict = deviation.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: geometry,
      scale: 30,
      maxPixels: 1e9
    });
    
    // The result is a Dictionary.  Print it.
    var devi = dict.get('B4');
    
    print('Mean deviation in %', devi);
    
    //-------------------------------------------------------------------------
    //-------------------------------------------------------------------------
        
      }}
      )
    };


  /* The panel for the export section with corresponding widgets. */
  app.export.panel = ui.Panel({
    widgets: [
      ui.Label('Start Processing', {fontWeight: 'bold', fontSize: '20px', fontFamily: 'serif',
        margin: '25px 0px 10px 0px'
      }),
      app.export.button
    ],
    style: app.SECTION_STYLE
  });
};

/** Creates the app helper functions. */
app.createHelpers = function() {
    /**
   * Enables or disables loading mode.
   * @param {boolean} enabled Whether loading mode is enabled.
   */
  app.setLoadingMode = function(enabled) {
    // Set the loading label visibility to the enabled mode.
    app.filters.loadingLabel.style().set('shown', enabled);
    // Set each of the widgets to the given enabled mode.
    var loadDependentWidgets = [
      app.filters.m,
      app.filters.year,
      app.filters.mapCenter,
      app.export.button
    ];
    loadDependentWidgets.forEach(function(widget) {
      widget.setDisabled(enabled);
    });
  };


    };

/** Creates the application interface. */
app.boot = function() {
  app.createPanels();
  app.createHelpers();
  var main = ui.Panel({
    widgets: [
      app.intro.panel,
      app.filters.panel,
      app.export.panel,
    ],
    style: {width: '300px', padding: '8px'}
  });
  Map.setCenter(-97, 26, 9);
  ui.root.insert(0, main);
};

app.boot();
